

GEEKSFORGEEKS

Best First Search (Informed Search)

Prerequisites : BFS, DFS 
In BFS and DFS, when we are at a node, we can consider any of the adjacent as next node. So both BFS and DFS blindly explore paths without considering any cost function. The idea of Best First Search is to use an evaluation function to decide which adjacent is most promising and then explore. Best First Search falls under the category of Heuristic Search or Informed Search.

We use a priority queue or heap to store costs of nodes which have lowest evaluation function value. So the implementation is a variation of BFS, we just need to change Queue to PriorityQueue. 

// This pseudocode is adapted from below // source: // https://courses.cs.washington.edu/ Best-First-Search(Graph g, Node start) 1) Create an empty PriorityQueue PriorityQueue pq; 2) Insert "start" in pq. pq.insert(start) 3) Until PriorityQueue is empty u = PriorityQueue.DeleteMin If u is the goal Exit Else Foreach neighbor v of u If v "Unvisited" Mark v "Visited" pq.insert(v) Mark u "Examined" End procedure

Let us consider the below example. 
 

" style="max-width: 100%; display: block !important; object-fit: contain;">

We start from source "S" and search for goal "I" using given costs and Best First search. pq initially contains S We remove s from and process unvisited neighbors of S to pq. pq now contains {A, C, B} (C is put before B because C has lesser cost) We remove A from pq and process unvisited neighbors of A to pq. pq now contains {C, B, E, D} We remove C from pq and process unvisited neighbors of C to pq. pq now contains {B, H, E, D} We remove B from pq and process unvisited neighbors of B to pq. pq now contains {H, E, D, F, G} We remove H from pq. Since our goal "I" is a neighbor of H, we return.

Below is the implementation of the above idea:


HTML,BODY{height:100%;width:100%;margin:0;padding:0;}BODY{}#mys-overlay{height:100%;width:100%;overflow:hidden;position:absolute;top:0;left:0;box-sizing:border-box;pointer-events:none;z-index:1;display:none;}BODY A,BODY A:visited,BODY A:hover,BODY A:active{color:inherit;cursor:pointer;text-decoration:inherit;}[dir=rtl] .flip-on-rtl{transform:scale(-1,1);transform-origin:center;}.ns-9wbr8-l-square-rda-vanilla{opacity:.01;position:absolute;top:0;left:0;display:block;width:336px;height:280px;}.ns-9wbr8-e-0{line-height:1.3;border-color:#e6e7e8;border-style:solid;border-width:1px;box-sizing:border-box;display:flex;flex-direction:column;font-family:Google Sans,sans-serif;font-size:10px;height:100%;width:100%;}.ns-9wbr8-e-1{line-height:1.3;box-sizing:border-box;display:flex;flex-direction:column;flex-grow:1;height:100%;}.ns-9wbr8-e-2{line-height:1.3;box-sizing:border-box;display:flex;flex-direction:column;justify-content:center;flex-grow:1;}.ns-9wbr8-e-3{box-sizing:border-box;font-weight:500;line-height:1.3;letter-spacing:0.02em;}.ns-9wbr8-e-5{box-sizing:border-box;font-weight:400;line-height:1.3;letter-spacing:0.02em;}.ns-9wbr8-e-7{box-sizing:border-box;font-weight:400;line-height:1.5;white-space:nowrap;}.ns-9wbr8-e-9{font-weight:400;text-align:center;text-transform:capitalize;display:block;}.ns-9wbr8-v-5 .ns-9wbr8-e-2{padding:21.75px;}.ns-9wbr8-v-5 .ns-9wbr8-e-3{font-size:27.25px;padding:11.9px 0 0;}.ns-9wbr8-v-5 .ns-9wbr8-e-5{font-size:16px;padding:11.9px 0 0;}.ns-9wbr8-v-5 .ns-9wbr8-e-7{font-size:14.75px;padding:11.9px 0 20.3px;}.ns-9wbr8-v-5 .ns-9wbr8-e-9{font-size:15px;padding:0 7px;height:39px;line-height:39px;max-height:39px;margin:0;min-width:170.52px;}.ns-9wbr8-l-square-rda-vanilla{opacity:1;position:relative;}.title:hover,.title-line1:hover,.title-line2:hover{color:rgba(0,0,0,0.59);text-decoration:none;}.body:hover{color:rgba(0,0,0,0.4);text-decoration:none;}.url:hover{color:#646464;text-decoration:none;}.ns-9wbr8-e-2{background-color:#fff;}.ns-9wbr8-e-3{color:rgba(0,0,0,0.79);font-family:"Open Sans",Google Sans,sans-serif;}.ns-9wbr8-e-4{text-decoration:none;background-image:linear-gradient(0deg,#cce7ff 50%,transparent 50%);white-space:nowrap;}.ns-9wbr8-e-5{color:rgba(0,0,0,0.6);font-family:"Open Sans",Google Sans,sans-serif;}.ns-9wbr8-e-6,.ns-9wbr8-e-8{text-decoration:none;white-space:nowrap;}.ns-9wbr8-e-7{color:rgba(0,0,0,0.4);font-family:"Open Sans",Google Sans,sans-serif;}.ns-9wbr8-e-9{text-decoration:none;background-color:#0088ff;border-radius:4px;box-shadow:0 6px 12px rgba(134,140,150,0.65);font-family:"Open Sans",Google Sans,sans-serif;}.ns-9wbr8-e-10{color:#fff;white-space:nowrap;}.abgc {position:absolute;z-index:2147483646;right:0;top:0;}.abgc amp-img, .abgc img {display:block;}.abgs {display:none;position:absolute;-webkit-transform:translateX(97px);transform:translateX(97px);right:16px;top:0;}.abgcp {position:absolute;right:0;top:0;width:31px;height:15px;padding-left:10px;padding-bottom:10px;}.abgb {position:relative;margin-right:16px;top:0;}.abgc:hover .abgs {-webkit-transform:none;transform:none;}.cbb {display: block;position:absolute;right:0;top:0;cursor: pointer;height: 15px;width: 15px;z-index: 9020;padding-left:16px;}.btn {display: inline-block;border-radius: 2px;-moz-box-sizing: border-box;-webkit-box-sizing: border-box;box-sizing: border-box;box-shadow: 0px 0px 2px rgba(0,0,0,0.12), 0px 1px 3px rgba(0,0,0,0.26);cursor: pointer;font-size: 0.7em;margin: 0 1px 0.4em 1px;}@media (max-width: 375px) and (min-height: 100px) {.btn {display: block;width: 90%;max-width: 240px;margin-left: auto;margin-right: auto;}}#spv1 amp-fit-text>div {-webkit-justify-content: flex-start;justify-content: flex-start;}.jt .pn amp-fit-text>div {-webkit-justify-content: flex-start;justify-content: flex-start;}.btn > span {display: inline-block;padding: 0.5em 0.6em;line-height: 1em;}#sbtn {background-color: #FFFFFF;color: #9E9EA6;text-decoration: none;}#sbtn:hover,#sbtn:active {background-color: #F5F5F5;}#rbtn {background-color: rgb(66,133,245);color: white;}#rbtn:hover,#rbtn:active {background-color: #3275E5;}#mta {position:absolute;top: 0;left: 0;font-family: Arial, sans-serif;font-size: 12px;font-weight: 400;line-height: 1em;}#mta input[type="radio"] {display: none;}#mta .pn {right: -336px;top: -280px;width:336px;height:280px;position: absolute;-moz-box-sizing: border-box;-webkit-box-sizing: border-box;box-sizing: border-box;background-color: #FAFAFA;text-align: center;}#spv2 {display: -webkit-flex;display: flex;-webkit-justify-content: flex-start;justify-content: flex-start;-webkit-flex-wrap: nowrap;flex-wrap: nowrap;overflow: hidden;background-color: #FAFAFA;font-size: 0;}.sv #spv2 {-webkit-flex-direction: column;flex-direction: column;}.jt.sv #spv2 {-webkit-justify-content: flex-start;justify-content: flex-start;-webkit-align-items: center;align-items: center;}#spv2 * {-moz-box-sizing: border-box;-webkit-box-sizing: border-box;box-sizing: border-box;}#spr1:checked ~ #cbb,#spr2:checked ~ #cbb,#spr3:checked ~ #cbb{display: none;}#spv3 {opacity:1;}.amp-animate #spv4 {opacity:0;transition: opacity 0.5s linear 2.5s;}.amp-animate #spv3 amp-fit-text {opacity:1;transition: opacity 0.5s linear 2s;}#spr3:checked ~ #spv3 amp-fit-text {opacity:0}#spr3:checked ~ #spv4 {opacity:1;}#spr1:checked ~ #spv1,#spr2:checked ~ #spv2,#spr3:checked ~ #spv3,#spr3:checked ~ #spv4{right: 0px;top: 0px;}.close {position: absolute;top: 2px;color: black;font-size: 15px;line-height: 15px;opacity: 0.5;height: 15px;width: 15px;user-select: none;cursor: pointer;}[dir="rtl"] .close {transform: scaleX(-1);}.ct svg {border: 0;margin: 0 0 -0.45em 0;display: inline-block;height: 1.38em;opacity: 0.4;}.ct {display: inline-block;line-height: 1.28em;color: rgba(0,0,0,0.4);text-align:center;padding: 0.3em;}.fct {padding: 1em;}#pct {display: block;font-weight: bold;padding: 1em 0.3em;}#ti {width: 336px;}#btns {width: 336px;}.fl {width: 336px;height:280px;}#si {position: relative;display: inline-block;margin-bottom: -0.15em;height: 1em;width: 1em;opacity: 0.4;}.sb {flex-shrink: 0;height: 50px;}.so {position: relative;z-index: 9110;overflow: hidden;display: inline-block;padding: 1px 5px;width: 96px;height: 50px;border: 1px solid #E0E0E0;background-color: #FFFFFF;cursor: pointer;}.so:hover,.so:active {background-color: #F5F5F5;}.so div {display: -webkit-flex;display: flex;-webkit-align-items: center;align-items: center;-webkit-justify-content: center;justify-content: center;width: 100%;height: 100%;}.so span {color: #4285F4;font-family: Arial, sans-serif;text-align: center;font-size: 12px;line-height: 14px;white-space: normal;}@media (min-height: 54px) {.sh.ss .so,.sv .so {box-shadow: 0px 0px 2px rgba(0,0,0,0.12), 0px 1px 3px rgba(0,0,0,0.26);border: none;}}.sv .so,.sh.ss .so {border-radius: 2px;}.sv .so {margin: 4px;}.sv.jt .so:first-child {margin-top: 8px;}.amp-fcp {display: inline-block;position: absolute;z-index: 9;top: 0;left: 0;width: 336px;height: 1000px;-webkit-transform: translateY(1000px);transform: translateY(1000px);}.amp-animate .amp-fcp {-webkit-animation: 1000ms step-end amp-fcp-anim;animation: 1000ms step-end amp-fcp-anim;}@-webkit-keyframes amp-fcp-anim {0% {-webkit-transform: translateY(0);transform: translateY(0);}100% {-webkit-transform: translateY(1000px);transform: translateY(1000px);}}@keyframes amp-fcp-anim {0% {-webkit-transform: translateY(0);transform: translateY(0);}100% {-webkit-transform: translateY(1000px);transform: translateY(1000px);}}body{visibility:hidden} " id="google_ads_iframe_1" style="position: absolute; border: 0px !important; margin: auto; padding: 0px !important; display: block; height: 280px; max-height: 100%; max-width: 100%; min-height: 0px; min-width: 0px; width: 336px; top: 0px; left: 0px; bottom: 0px; right: 0px;">

C++

// C++ program to implement Best First Search using priority

// queue

#include <bits/stdc++.h>

using namespace std; 

typedef pair<int, int> pi; 

 

vector<vector<pi> > graph;

 

// Function for adding edges to graph

void addedge(int x, int y, int cost) 

{

    graph[x].push_back(make_pair(cost, y)); 

    graph[y].push_back(make_pair(cost, x)); 

}

 

// Function For Implementing Best First Search

// Gives output path having lowest cost

void best_first_search(int source, int target, int n) 

{

    vector<bool> visited(n, false); 

    // MIN HEAP priority queue 

    priority_queue<pi, vector<pi>, greater<pi> > pq; 

    // sorting in pq gets done by first value of pair 

    pq.push(make_pair(0, source)); 

    int s = source; 

    visited[s] = true; 

    while (!pq.empty()) { 

        int x = pq.top().second; 

        // Displaying the path having lowest cost 

        cout << x << " "; 

        pq.pop(); 

        if (x == target) 

            break; 

 

        for (int i = 0; i < graph[x].size(); i++) { 

            if (!visited[graph[x][i].second]) { 

                visited[graph[x][i].second] = true; 

                pq.push(make_pair(graph[x][i].first,graph[x][i].second)); 

            } 

        } 

    } 

}

 

// Driver code to test above methods

int main() 

{

    // No. of Nodes 

    int v = 14; 

    graph.resize(v); 

 

    // The nodes shown in above example(by alphabets) are 

    // implemented using integers addedge(x,y,cost); 

    addedge(0, 1, 3); 

